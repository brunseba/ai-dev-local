services:
  # MCP Git Server - Git repository operations
  mcp-git:
    image: mcp/git:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/git/Dockerfile
    restart: unless-stopped
    volumes:
      - .:/workspace:ro  # Read-only access to current project
      - ~/.gitconfig:/root/.gitconfig:ro  # Git configuration
      - ~/.ssh:/root/.ssh:ro  # SSH keys for Git operations
    environment:
      - GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME:-AI Dev Local}
      - GIT_AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-dev@local.ai}
      - GIT_COMMITTER_NAME=${GIT_AUTHOR_NAME:-AI Dev Local}
      - GIT_COMMITTER_EMAIL=${GIT_AUTHOR_EMAIL:-dev@local.ai}
    ports:
      - "${MCP_GIT_PORT:-9001}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-git"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_git; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Filesystem Server - Secure file operations
  mcp-filesystem:
    image: mcp/filesystem:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/filesystem/Dockerfile
    restart: unless-stopped
    volumes:
      - .:/workspace  # Full access to current project
      - /tmp/mcp-fs:/tmp/mcp-fs  # Temporary file operations
    environment:
      - ALLOWED_DIRECTORIES=/workspace,/tmp/mcp-fs
      - READ_ONLY_DIRECTORIES=/workspace/.git
    ports:
      - "${MCP_FILESYSTEM_PORT:-9002}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-filesystem"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_filesystem; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Fetch Server - Web content retrieval
  mcp-fetch:
    image: mcp/fetch:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/fetch/Dockerfile
    restart: unless-stopped
    environment:
      - USER_AGENT=AI-Dev-Local-MCP/1.0
      - MAX_RESPONSE_SIZE=10485760  # 10MB
      - TIMEOUT=30
    ports:
      - "${MCP_FETCH_PORT:-9003}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-fetch"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_fetch; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Memory Server - Persistent knowledge graph
  mcp-memory:
    image: mcp/memory:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/memory/Dockerfile
    restart: unless-stopped
    volumes:
      - mcp_memory_data:/data
    environment:
      - MEMORY_STORE_PATH=/data/memory.db
      - MAX_MEMORY_SIZE=1073741824  # 1GB
    ports:
      - "${MCP_MEMORY_PORT:-9004}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-memory"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_memory; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Time Server - Time and timezone utilities
  mcp-time:
    image: mcp/time:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/time/Dockerfile
    restart: unless-stopped
    environment:
      - DEFAULT_TIMEZONE=${TIMEZONE:-UTC}
    ports:
      - "${MCP_TIME_PORT:-9005}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-time"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_time; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP PostgreSQL Server - Database operations with HTTP wrapper
  mcp-postgres:
    build:
      context: ./docker/mcp-postgres
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_URI=postgresql://postgres:postgres@postgres:5432/postgres
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "${MCP_POSTGRES_PORT:-9006}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-postgres"
    networks:
      - mcp-network
      - ai-dev-local
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  # MCP Everything Server - Reference/test server
  mcp-everything:
    image: mcp/everything:latest
    build:
      context: https://github.com/modelcontextprotocol/servers.git#main
      dockerfile: src/everything/Dockerfile
    restart: unless-stopped
    environment:
      - DEMO_MODE=true
    ports:
      - "${MCP_EVERYTHING_PORT:-9007}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-everything"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import mcp_server_everything; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP GitHub Server - Official GitHub integration with HTTP wrapper
  # The official GitHub MCP server only supports stdio, so we use a wrapper
  mcp-github:
    build:
      context: ./docker/mcp-github
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
      - GITHUB_TOOLSETS=${GITHUB_TOOLSETS:-repos,issues,pull_requests,actions,code_security,context}
      - GITHUB_READ_ONLY=${GITHUB_READ_ONLY:-false}
    ports:
      - "${MCP_GITHUB_PORT:-9008}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-github"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MCP GitLab Server - GitLab integration
  # Official repository: https://github.com/zereight/gitlab-mcp
  mcp-gitlab:
    build:
      context: https://github.com/zereight/gitlab-mcp.git
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - GITLAB_PERSONAL_ACCESS_TOKEN=${GITLAB_TOKEN}
      - GITLAB_API_URL=${GITLAB_URL:-https://gitlab.com/api/v4}
      - GITLAB_READ_ONLY_MODE=${GITLAB_READ_ONLY_MODE:-false}
      - USE_GITLAB_WIKI=${USE_GITLAB_WIKI:-false}
      - USE_MILESTONE=${USE_MILESTONE:-false}
      - USE_PIPELINE=${USE_PIPELINE:-false}
    ports:
      - "${MCP_GITLAB_PORT:-9009}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-gitlab"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MCP SonarQube Server - Code quality analysis
  # Official repository: https://hub.docker.com/r/mcp/sonarqube
  mcp-sonarqube:
    image: mcp/sonarqube:latest
    restart: unless-stopped
    environment:
      - SONARQUBE_URL=${SONARQUBE_URL:-http://localhost:9000}
      - SONARQUBE_TOKEN=${SONARQUBE_TOKEN}
      - SONARQUBE_ORGANIZATION=${SONARQUBE_ORGANIZATION:-}
    ports:
      - "${MCP_SONARQUBE_PORT:-9010}:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-sonarqube"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MCP Gateway - Central routing and management
  mcp-gateway:
    build:
      context: ./docker/mcp-gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - mcp-git
      - mcp-filesystem
      - mcp-fetch
      - mcp-memory
      - mcp-time
      - mcp-postgres
      - mcp-github
    environment:
      - MCP_SERVERS=git:http://mcp-git:8000,filesystem:http://mcp-filesystem:8000,fetch:http://mcp-fetch:8000,memory:http://mcp-memory:8000,time:http://mcp-time:8000,postgres:http://mcp-postgres:8000,github:http://mcp-github:8000,gitlab:http://mcp-gitlab:8000,sonarqube:http://mcp-sonarqube:8000
      - GATEWAY_PORT=${MCP_GATEWAY_INTERNAL_PORT:-8080}
    ports:
      - "${MCP_GATEWAY_PORT:-9000}:${MCP_GATEWAY_INTERNAL_PORT:-8080}"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-gateway"
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MCP_GATEWAY_INTERNAL_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mcp_memory_data:

networks:
  mcp-network:
    name: ai-dev-mcp
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.100.0/24
  ai-dev-local:
    external: true
    name: ai-dev-local
